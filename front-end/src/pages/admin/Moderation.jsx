import React, { useMemo, useState } from "react";
import AdminHeader from "../../components/admin/AdminHeader";
import {
  adminStats,
  commentKeywords,
  moderationPending,
  moderationApproved,
  moderationRejected,
} from "../../data/mockData";

export default function Moderation() {
  const [status, setStatus] = useState("pending"); // pending | approved | rejected

  // D·ªØ li·ªáu hi·ªán t·∫°i d·ª±a theo tab
  const currentData = useMemo(() => {
    switch (status) {
      case "approved":
        return moderationApproved;
      case "rejected":
        return moderationRejected;
      default:
        return moderationPending;
    }
  }, [status]);

  // Handler (demo)
  const handleApprove = (id) => alert(`‚úÖ Duy·ªát truy·ªán #${id}`);
  const handleReject = (id) => alert(`‚ùå T·ª´ ch·ªëi truy·ªán #${id}`);
  const handleView = (id) => alert(`üëÅÔ∏è Xem chi ti·∫øt truy·ªán #${id}`);

  return (
    <div className="min-h-screen bg-white text-gray-900">
      <AdminHeader
        pendingCount={adminStats.pending}
        approvedCount={moderationApproved.length}
        reportCount={adminStats.reports}
        keywordCount={commentKeywords.length}
      />

      <main className="max-w-6xl mx-auto px-6 py-10">
        <h2 className="text-4xl font-bold mb-2">Ki·ªÉm duy·ªát truy·ªán</h2>
        <p className="text-lg text-gray-600 mb-8">
          Qu·∫£n l√Ω c√°c truy·ªán do t√°c gi·∫£ g·ª≠i l√™n h·ªá th·ªëng.
        </p>

        {/* Tabs */}
        <div className="flex flex-wrap gap-3 mb-6">
          {[
            { key: "pending", label: `Ch·ªù duy·ªát (${moderationPending.length})` },
            { key: "approved", label: `ƒê√£ duy·ªát (${moderationApproved.length})` },
            { key: "rejected", label: `T·ª´ ch·ªëi (${moderationRejected.length})` },
          ].map((t) => (
            <button
              key={t.key}
              onClick={() => setStatus(t.key)}
              className={`px-6 py-3 rounded-xl text-lg font-medium transition-all duration-200
                ${
                  status === t.key
                    ? "bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"
                    : "bg-purple-50 hover:bg-pink-50 text-gray-700 border border-purple-200"
                }`}
            >
              {t.label}
            </button>
          ))}
        </div>

        {/* Table */}
        <div className="overflow-x-auto rounded-2xl border border-purple-200 shadow-sm">
          <table className="min-w-full text-lg">
            <thead className="bg-gradient-to-r from-purple-50 to-pink-50">
              <tr className="text-gray-700">
                <th className="py-3 px-4 text-left">ID</th>
                <th className="py-3 px-4 text-left">Ti√™u ƒë·ªÅ</th>
                <th className="py-3 px-4 text-left">T√°c gi·∫£</th>
                <th className="py-3 px-4 text-left">Th·ªÉ lo·∫°i</th>
                <th className="py-3 px-4 text-left">Ng√†y g·ª≠i</th>
                <th className="py-3 px-4 text-center">Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {currentData.map((n) => (
                <tr
                  key={n.id}
                  className="border-t border-purple-100 hover:bg-purple-50/40 transition"
                >
                  <td className="py-3 px-4 text-gray-700">#{n.id}</td>
                  <td className="py-3 px-4 font-semibold text-gray-900">
                    {n.title}
                  </td>
                  <td className="py-3 px-4 text-gray-700">{n.author}</td>
                  <td className="py-3 px-4 text-gray-700">{n.genre}</td>
                  <td className="py-3 px-4 text-gray-600">{n.submittedAt}</td>
                  <td className="py-3 px-4 text-center">
                    {status === "pending" && (
                      <>
                        <button
                          onClick={() => handleApprove(n.id)}
                          className="px-4 py-2 mr-2 rounded-lg text-white bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-90"
                        >
                          Duy·ªát
                        </button>
                        <button
                          onClick={() => handleReject(n.id)}
                          className="px-4 py-2 border border-purple-300 rounded-lg hover:bg-purple-50 text-gray-800"
                        >
                          T·ª´ ch·ªëi
                        </button>
                      </>
                    )}
                    {status !== "pending" && (
                      <button
                        onClick={() => handleView(n.id)}
                        className="px-5 py-2 rounded-lg bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:opacity-90"
                      >
                        Xem chi ti·∫øt
                      </button>
                    )}
                  </td>
                </tr>
              ))}
              {currentData.length === 0 && (
                <tr>
                  <td
                    colSpan="6"
                    className="py-10 text-center text-gray-500 text-lg italic"
                  >
                    Kh√¥ng c√≥ truy·ªán n√†o trong danh s√°ch n√†y.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* G·ª£i √Ω ki·ªÉm duy·ªát */}
        <div className="mt-8 bg-purple-50 rounded-2xl p-6 border border-purple-200">
          <h3 className="text-2xl font-semibold text-gray-900 mb-3">
            G·ª£i √Ω ki·ªÉm duy·ªát
          </h3>
          <ul className="list-disc list-inside text-gray-700 space-y-2">
            <li>Ki·ªÉm tra ti√™u ƒë·ªÅ, n·ªôi dung, th·ªÉ lo·∫°i v√† ·∫£nh b√¨a c·ªßa truy·ªán.</li>
            <li>
              Kh√¥ng duy·ªát c√°c truy·ªán c√≥ y·∫øu t·ªë ph·∫£n c·∫£m, vi ph·∫°m quy chu·∫©n vƒÉn
              h√≥a.
            </li>
            <li>
              Khi t·ª´ ch·ªëi, n√™n ghi r√µ l√Ω do ƒë·ªÉ t√°c gi·∫£ c√≥ th·ªÉ ch·ªânh s·ª≠a v√† g·ª≠i
              l·∫°i.
            </li>
          </ul>
        </div>
      </main>
    </div>
  );
}
